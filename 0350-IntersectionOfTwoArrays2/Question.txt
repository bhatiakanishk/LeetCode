Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.

Example 1:
Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]

Example 2:
Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.

Constraints:

1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 1000

Follow up:

Q1) What if the given array is already sorted? How would you optimize your algorithm?

A) Use the 2 pointer approach

from typing import List

class Solution:
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        nums1.sort()
        nums2.sort()
        
        result = []
        
        i, j = 0, 0  # Pointers for nums1 and nums2
        
        while i < len(nums1) and j < len(nums2):
            if nums1[i] == nums2[j]:
                result.append(nums1[i])
                i += 1
                j += 1
            elif nums1[i] < nums2[j]:
                i += 1
            else:
                j += 1
        
        return result


Q2) What if nums1's size is small compared to nums2's size? Which algorithm is better?

A) 2 pointer Approach

Q3) What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?

A) Read elements from nums2 one by one. Then binary search in sums 1 to find the intersecting numbers